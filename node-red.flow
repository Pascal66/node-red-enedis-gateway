[
    {
        "id": "c07c0ac5.ca6f98",
        "type": "tab",
        "label": "Enedis",
        "disabled": false,
        "info": ""
    },
    {
        "id": "365a12cd.1d791e",
        "type": "credentials",
        "z": "c07c0ac5.ca6f98",
        "name": "Set Token + PDL",
        "props": [
            {
                "value": "token",
                "type": "msg"
            },
            {
                "value": "usage_point_id",
                "type": "msg"
            }
        ],
        "x": 370,
        "y": 280,
        "wires": [
            [
                "a12705d0.3c1588"
            ]
        ]
    },
    {
        "id": "a7571682.4310f8",
        "type": "function",
        "z": "c07c0ac5.ca6f98",
        "name": "Set Header",
        "func": "msg.headers = {};\nmsg.headers['Content-Type'] = 'application/x-www-form-urlencoded';\nmsg.headers['Authorization'] = msg.token;\nmsg.payload = {\n    'type': \"contracts\",\n    'usage_point_id': msg.usage_point_id,\n    'start': msg.start,\n    'end': msg.end\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1080,
        "y": 280,
        "wires": [
            [
                "5c3b104.548e6f"
            ]
        ]
    },
    {
        "id": "5387acff.629654",
        "type": "change",
        "z": "c07c0ac5.ca6f98",
        "name": "Set Method",
        "rules": [
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "POST",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 280,
        "wires": [
            [
                "a7571682.4310f8",
                "161929bd.583bb6"
            ]
        ]
    },
    {
        "id": "e6cc5856.0c3828",
        "type": "json",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1580,
        "y": 280,
        "wires": [
            [
                "4c88a7c.3b20458"
            ]
        ]
    },
    {
        "id": "5c3b104.548e6f",
        "type": "delay",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "3",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1260,
        "y": 280,
        "wires": [
            [
                "c48a5422.82a038"
            ]
        ]
    },
    {
        "id": "6e9e8629.0683a8",
        "type": "inject",
        "z": "c07c0ac5.ca6f98",
        "name": "This years (Y-1)",
        "props": [
            {
                "p": "since",
                "v": "365",
                "vt": "num"
            },
            {
                "p": "ask",
                "v": "since",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 170,
        "wires": [
            [
                "365a12cd.1d791e"
            ]
        ]
    },
    {
        "id": "2aa9e8ff.429028",
        "type": "function",
        "z": "c07c0ac5.ca6f98",
        "name": "Get Contract",
        "func": "var usage_points = msg.payload.customer.usage_points;\nfor(let id in usage_points) {\n    if (usage_points[id].usage_point.usage_point_id == msg.usage_point_id) {\n        msg.subscribed_power =  usage_points[id].contracts.subscribed_power;\n        msg.offpeak_hours =  usage_points[id].contracts.offpeak_hours || 'HC (0H00-0H00)';\n        msg.distribution_tariff = usage_points[id].contracts.distribution_tariff;\n        msg.last_distribution_tariff_change_date = usage_points[id].contracts.last_distribution_tariff_change_date;\n    }        \n}\n\nmsg.payload = msg.offpeak_hours ;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2070,
        "y": 300,
        "wires": [
            [
                "f1335693.d225f8",
                "2de516e0.7a8dea"
            ]
        ]
    },
    {
        "id": "a5ab6458.7ced58",
        "type": "function",
        "z": "c07c0ac5.ca6f98",
        "name": "Split date week per week",
        "func": "var now = new Date();\nvar date_begin = new Date();\nvar date_end = new Date();\nvar since = msg.since;\nvar to = msg.to ||false;\ndate_begin = date_begin.setDate(date_begin.getDate() - since);\nvar finish = false;\nvar id = 0;\n\nif (to == false) {\n    to = now;\n}else{\n    to = date_end.setDate(date_end.getDate() - to)\n}\n\nmsg.payload = [];\n\nif (since < 7) {\n    start_week = new Date(date_begin);\n    year  = start_week.getFullYear();    \n    month = (start_week.getMonth() + 1).toString().padStart(2, \"0\");\n    day   = start_week.getDate().toString().padStart(2, \"0\");\n    start = year + '-' + month + '-' + day;\n    \n    end_week = new Date(now); \n    end_week = end_week.setDate(end_week.getDate() - 1);        \n    end_week = new Date(end_week); \n    year  = end_week.getFullYear();    \n    month = (end_week.getMonth() + 1).toString().padStart(2, \"0\");\n    day   = end_week.getDate().toString().padStart(2, \"0\");    \n    end = year + '-' + month + '-' + day; \n    id = id + 1;\n    msg.payload.push({\n        start: start,\n        end: end,\n        id: id\n    });    \n    \n}else{\n    while (finish === false) {\n        \n        start_week = new Date(date_begin);\n        year  = start_week.getFullYear();    \n        month = (start_week.getMonth() + 1).toString().padStart(2, \"0\");\n        day   = start_week.getDate().toString().padStart(2, \"0\");\n        start = year + '-' + month + '-' + day;\n        \n        date_begin = new Date(date_begin);\n        end_week = date_begin.setDate(date_begin.getDate() + 7);\n        end_week = new Date(end_week);\n    \n        year  = end_week.getFullYear();    \n        month = (end_week.getMonth() + 1).toString().padStart(2, \"0\");\n        day   = end_week.getDate().toString().padStart(2, \"0\");\n        end = year + '-' + month + '-' + day;  \n        \n        id = id + 1;        \n        \n        if (to < end_week) {\n            finish = true;\n        }else{\n            msg.payload.push({\n                start: start,\n                end: end,\n                id: id\n                });\n        }\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 850,
        "y": 570,
        "wires": [
            [
                "b7d756a4.f1d818"
            ]
        ]
    },
    {
        "id": "20a8cad0.e117b6",
        "type": "http request",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "2923591e.104216",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1570,
        "y": 570,
        "wires": [
            [
                "c3d874c9.6296a8"
            ]
        ]
    },
    {
        "id": "d94da224.6067f",
        "type": "function",
        "z": "c07c0ac5.ca6f98",
        "name": "Set Header",
        "func": "msg.headers = {};\nmsg.headers['Content-Type'] = 'application/x-www-form-urlencoded';\nmsg.headers['Authorization'] = msg.token;\nmsg.id = msg.payload.id;\nmsg.payload = {\n    'type': \"consumption_load_curve\",\n    'usage_point_id': msg.usage_point_id,\n    'start': msg.payload.start,\n    'end': msg.payload.end\n}\nmsg.query = {\n    'type': \"consumption_load_curve\",\n    'usage_point_id': msg.usage_point_id,\n    'start': msg.payload.start,\n    'end': msg.payload.end\n}\n// msg.payload = {\n//     'type': \"daily_consumption\",\n//     'usage_point_id': msg.usage_point_id,\n//     'start': msg.payload.start,\n//     'end': msg.payload.end\n// }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1200,
        "y": 570,
        "wires": [
            [
                "22f0c4e8.2506fc"
            ]
        ]
    },
    {
        "id": "990f96c2.3bf648",
        "type": "json",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1880,
        "y": 520,
        "wires": [
            [
                "56d40a3c.20f3d4"
            ]
        ]
    },
    {
        "id": "b2bd86bb.833d18",
        "type": "influxdb out",
        "z": "c07c0ac5.ca6f98",
        "influxdb": "57d9cd06.0e4dc4",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "",
        "retentionPolicyV18Flux": "",
        "org": "",
        "bucket": "",
        "x": 2580,
        "y": 520,
        "wires": []
    },
    {
        "id": "56d40a3c.20f3d4",
        "type": "function",
        "z": "c07c0ac5.ca6f98",
        "name": "Fields",
        "func": "var unit                = msg.payload.meter_reading.reading_type.unit;\nvar measurement_kind    = msg.payload.meter_reading.reading_type.measurement_kind\nvar aggregate           = msg.payload.meter_reading.reading_type.aggregate;\nvar interval_reading    = msg.payload.meter_reading.interval_reading;\nvar reading_start       = msg.payload.meter_reading.start;\n\n// date_hc_begin = date_timestamp.setHours(start.split('H')[0],start.split('H')[1]);\n// date_hc_end = date_hc_end.setDate(date_hc_end.getDate() + 1);\n\nreading_start = new Date(reading_start);\nreading_start = reading_start.setDate(reading_start.getDate() - 1);\nstart_reading = true;\n\nvar hc = msg.hc;\n\nnew_day = undefined;\njumping_day = undefined\n\nmsg.payload = [];\n\nfor(let id in interval_reading) {\n    \n    date = interval_reading[id].date;\n    date_timestamp = new Date(date);\n    \n    type = \"HP\";\n    \n    for(let idd in hc) {\n        start = hc[idd].start;\n        end = hc[idd].end;\n        \n        start_hour = start.split(\"H\")[0];\n        end_hour = end.split(\"H\")[0];\n        \n        if (parseInt(start_hour) > parseInt(end_hour) ){\n            jumping_day = true;\n        }else{\n            jumping_day = false;\n        }\n        \n        if (jumping_day === true) {\n            \n            hc_start    = new Date(date_timestamp);\n            hc_end      = new Date(date_timestamp);\n\n            day_start   = new Date(hc_start).getDate();\n            day_current = new Date(date_timestamp).getDate();\n            hours_current = new Date(date_timestamp).getHours();\n            day_ending  = new Date(hc_end).getDate();\n            \n            if (hours_current < 12 && day_start == day_current) {\n                hc_start = new Date(hc_start);\n                hc_start = hc_start.setDate(hc_start.getDate() - 1);\n            }\n            if (hours_current >= 12) {\n                hc_end = new Date(hc_end);\n                if (day_ending == day_current) {\n                    hc_end = hc_end.setDate(hc_end.getDate() + 1);\n                }              \n            }            \n            \n        }else{\n            hc_start = new Date(date_timestamp);\n            hc_end = new Date(date_timestamp);\n        }\n        \n        hc_start = new Date(hc_start);\n        hc_start = hc_start.setHours(start.split('H')[0],start.split('H')[1]); \n        hc_end = new Date(hc_end);\n        hc_end = hc_end.setHours(end.split('H')[0],end.split('H')[1]);     \n        \n        if (hc_start <= date_timestamp && date_timestamp < hc_end) {\n            type = \"HC\";\n        }\n        \n        // begin_date = new Date(hc_start).getDate()+\" - \"+new Date(hc_start).getHours()+\":\"+new Date(hc_start).getMinutes();\n        // ended_date = new Date(hc_end).getDate()+\" - \"+new Date(hc_end).getHours()+\":\"+new Date(hc_end).getMinutes();\n        // timestamp = new Date(date_timestamp).getDate()+\" - \"+new Date(date_timestamp).getHours()+\":\"+new Date(date_timestamp).getMinutes();        new Date(date_timestamp)\n        // node.log(begin_date+\"\\t<=\\t\"+timestamp+\"\\t<\\t\"+ended_date+\"\\t=> \"+type);  \n    }\n    \n    tags = {\n        month: date.split(' ')[0].split('-')[1],\n        year: date.split(' ')[0].split('-')[0],\n        measure_type: interval_reading[id].measure_type,\n        // interval_length: interval_reading[id].interval_length,\n        usage_point_id: msg.usage_point_id,\n        type: type\n    }\n    \n    mesure_interval = interval_reading[id].interval_length.match(/\\d+/)[0];\n    // value = parseInt(interval_reading[id].value/60*mesure_interval)\n    value = parseInt(interval_reading[id].value*(mesure_interval/60))\n    // value = parseInt(interval_reading[id].value)\n    \n    node.log(value);\n    \n    fields = {\n        value: value,\n        subscribed_power: parseInt(msg.subscribed_power),\n        year: date.split(' ')[0].split('-')[0],\n        month: date.split(' ')[0].split('-')[1],\n        time: date_timestamp*1000000\n        // time: date_timestamp\n    }\n    \n    msg.payload.push([fields,tags]);\n    if (type == \"HC\") {\n        // node.log(\"============================================================================== \"+type);\n    }\n}\n\nmsg.measurement = \"consumption_load_curve\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2010,
        "y": 520,
        "wires": [
            [
                "66128905.90dcb8"
            ]
        ]
    },
    {
        "id": "66128905.90dcb8",
        "type": "split",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 2140,
        "y": 520,
        "wires": [
            [
                "856155e9.74e388"
            ]
        ]
    },
    {
        "id": "9550b196.e3cbf",
        "type": "function",
        "z": "c07c0ac5.ca6f98",
        "name": "Calcul HC/HP",
        "func": "var offpeak_hours = msg.offpeak_hours;\nvar parts = offpeak_hours.match(/([('])(.*)([)'])/);\ndate = parts[2].split(';');\n\nmsg.hc = [];\n\nfor(let id in date) {\n    msg.hc.push({\n        start: date[id].split('-')[0],\n        end: date[id].split('-')[1],\n    })\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 630,
        "y": 570,
        "wires": [
            [
                "a5ab6458.7ced58"
            ]
        ]
    },
    {
        "id": "c48a5422.82a038",
        "type": "http request",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "2923591e.104216",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1430,
        "y": 280,
        "wires": [
            [
                "e6cc5856.0c3828"
            ]
        ]
    },
    {
        "id": "b7d756a4.f1d818",
        "type": "split",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1040,
        "y": 570,
        "wires": [
            [
                "d94da224.6067f",
                "f9ae91a7.6671f"
            ]
        ]
    },
    {
        "id": "6fe075fe.8fb38c",
        "type": "inject",
        "z": "c07c0ac5.ca6f98",
        "name": "1 Semaines",
        "props": [
            {
                "p": "since",
                "v": "8",
                "vt": "num"
            },
            {
                "p": "ask",
                "v": "since",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 04 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 370,
        "wires": [
            [
                "365a12cd.1d791e"
            ]
        ]
    },
    {
        "id": "2989405.323a5c",
        "type": "inject",
        "z": "c07c0ac5.ca6f98",
        "name": "Last years (Y-2)",
        "props": [
            {
                "p": "since",
                "v": "730",
                "vt": "num"
            },
            {
                "p": "to",
                "v": "365",
                "vt": "num"
            },
            {
                "p": "ask",
                "v": "since",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "365a12cd.1d791e"
            ]
        ]
    },
    {
        "id": "3b65863c.65936a",
        "type": "inject",
        "z": "c07c0ac5.ca6f98",
        "name": "3 Mois",
        "props": [
            {
                "p": "since",
                "v": "90",
                "vt": "num"
            },
            {
                "p": "ask",
                "v": "since",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "365a12cd.1d791e"
            ]
        ]
    },
    {
        "id": "10c9828d.dd384d",
        "type": "influxdb in",
        "z": "c07c0ac5.ca6f98",
        "influxdb": "57d9cd06.0e4dc4",
        "name": "",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "",
        "x": 1370,
        "y": 630,
        "wires": [
            []
        ]
    },
    {
        "id": "f9ae91a7.6671f",
        "type": "function",
        "z": "c07c0ac5.ca6f98",
        "name": "Delete History",
        "func": "msg.query = \"DELETE FROM consumption_load_curve WHERE time >= '\"+msg.payload.start+\"' AND time <= '\"+msg.payload.end+\"';\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1210,
        "y": 630,
        "wires": [
            [
                "10c9828d.dd384d"
            ]
        ]
    },
    {
        "id": "c3d874c9.6296a8",
        "type": "switch",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1730,
        "y": 570,
        "wires": [
            [
                "990f96c2.3bf648"
            ],
            [
                "3f9b2aea.1920b6"
            ]
        ]
    },
    {
        "id": "d3f22afa.476c48",
        "type": "switch",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "property": "payload.customer.usage_points",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1840,
        "y": 300,
        "wires": [
            [
                "3c3f483b.52ab98"
            ],
            [
                "2aa9e8ff.429028",
                "4da01bb.1821ae4"
            ]
        ]
    },
    {
        "id": "5a3bdb6b.f68a34",
        "type": "inject",
        "z": "c07c0ac5.ca6f98",
        "name": "export2mqtt",
        "props": [
            {
                "p": "ask",
                "v": "export2mqtt",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 08 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 480,
        "wires": [
            [
                "365a12cd.1d791e"
            ]
        ]
    },
    {
        "id": "6bd1fe2d.d40bd",
        "type": "function",
        "z": "c07c0ac5.ca6f98",
        "name": "---- Week consommation ----",
        "func": "msg.query = 'SELECT sum(\"value\") /60*10 FROM \"hass\".\"autogen\".\"consumption_load_curve\" WHERE (\"usage_point_id\" =~ /^'+msg.usage_point_id+'$/) AND time >= now() - 7d GROUP BY value fill(none)';\nmsg.topic = \"linky/consommation/semaine\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 350,
        "y": 920,
        "wires": [
            [
                "c4cd65ea.89e318"
            ]
        ]
    },
    {
        "id": "c4cd65ea.89e318",
        "type": "influxdb in",
        "z": "c07c0ac5.ca6f98",
        "influxdb": "57d9cd06.0e4dc4",
        "name": "",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "",
        "x": 590,
        "y": 980,
        "wires": [
            [
                "2a982e5b.66e142"
            ]
        ]
    },
    {
        "id": "90156a2.84ae798",
        "type": "mqtt out",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "true",
        "broker": "5a120b36.df9674",
        "x": 940,
        "y": 1040,
        "wires": []
    },
    {
        "id": "7be5063b.1c3978",
        "type": "function",
        "z": "c07c0ac5.ca6f98",
        "name": "-- Month consommation --",
        "func": "msg.query = 'SELECT sum(\"value\") /60*10 FROM \"hass\".\"autogen\".\"consumption_load_curve\" WHERE (\"usage_point_id\" =~ /^'+msg.usage_point_id+'$/) AND time >= now() - 31d GROUP BY value fill(none)';\nmsg.topic = \"linky/consommation/mois\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 350,
        "y": 1000,
        "wires": [
            [
                "c4cd65ea.89e318"
            ]
        ]
    },
    {
        "id": "3f181835.f64728",
        "type": "function",
        "z": "c07c0ac5.ca6f98",
        "name": "---- Years consommation ----",
        "func": "msg.query = 'SELECT sum(\"value\") /60*10 FROM \"autogen\".\"consumption_load_curve\" WHERE (\"usage_point_id\" =~ /^'+msg.usage_point_id+'$/) AND time >= 1568789375586ms GROUP BY value fill(none)';\nmsg.topic = \"linky/consommation/annees\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 350,
        "y": 1080,
        "wires": [
            [
                "296d1659.048eea"
            ]
        ]
    },
    {
        "id": "2a982e5b.66e142",
        "type": "unit-converter",
        "z": "c07c0ac5.ca6f98",
        "category": "power",
        "inputUnit": "W",
        "outputUnit": "kW",
        "inputField": "msg.payload[0].sum",
        "outputField": "payload",
        "inputFieldType": "msg",
        "outputFieldType": "msg",
        "roundOutputField": true,
        "outputFieldDecimals": 2,
        "name": "",
        "x": 760,
        "y": 980,
        "wires": [
            [
                "90156a2.84ae798"
            ]
        ]
    },
    {
        "id": "296d1659.048eea",
        "type": "influxdb in",
        "z": "c07c0ac5.ca6f98",
        "influxdb": "57d9cd06.0e4dc4",
        "name": "",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "",
        "x": 590,
        "y": 1100,
        "wires": [
            [
                "3d942600.833bda"
            ]
        ]
    },
    {
        "id": "3d942600.833bda",
        "type": "unit-converter",
        "z": "c07c0ac5.ca6f98",
        "category": "power",
        "inputUnit": "W",
        "outputUnit": "MW",
        "inputField": "msg.payload[0].sum",
        "outputField": "payload",
        "inputFieldType": "msg",
        "outputFieldType": "msg",
        "roundOutputField": true,
        "outputFieldDecimals": 2,
        "name": "",
        "x": 760,
        "y": 1100,
        "wires": [
            [
                "90156a2.84ae798"
            ]
        ]
    },
    {
        "id": "8c963188.078be",
        "type": "function",
        "z": "c07c0ac5.ca6f98",
        "name": "Month consommation N-1",
        "func": "msg.query = 'SELECT sum(\"value\") /60*10 FROM \"autogen\".\"consumption_load_curve\" WHERE (\"usage_point_id\" =~ /^'+msg.usage_point_id+'$/) AND time >= now() -  396d AND time <= now() - 365d GROUP BY value fill(none)';\nmsg.topic = \"linky/consommation/mois_n-1\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 350,
        "y": 1040,
        "wires": [
            [
                "c4cd65ea.89e318"
            ]
        ]
    },
    {
        "id": "8184a1c9.e2814",
        "type": "function",
        "z": "c07c0ac5.ca6f98",
        "name": "Week consommation N-1",
        "func": "msg.query = 'SELECT sum(\"value\") /60*10 FROM \"autogen\".\"consumption_load_curve\" WHERE (\"usage_point_id\" =~ /^'+msg.usage_point_id+'$/) AND time >= now() -  372d AND time <= now() - 365d GROUP BY value fill(none)';\nmsg.topic = \"linky/consommation/semaine_n-1\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 350,
        "y": 960,
        "wires": [
            [
                "c4cd65ea.89e318"
            ]
        ]
    },
    {
        "id": "c8a10f1f.1a398",
        "type": "function",
        "z": "c07c0ac5.ca6f98",
        "name": "Years consommation N-1",
        "func": "msg.query = 'SELECT sum(\"value\") /60*10 FROM \"autogen\".\"consumption_load_curve\" WHERE (\"usage_point_id\" =~ /^'+msg.usage_point_id+'$/) AND time >= now() -  730d AND time <= now() - 365d GROUP BY value fill(none)';\nmsg.topic = \"linky/consommation/annees_n-1\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 350,
        "y": 1120,
        "wires": [
            [
                "296d1659.048eea"
            ]
        ]
    },
    {
        "id": "f01d84f5.484038",
        "type": "inject",
        "z": "c07c0ac5.ca6f98",
        "name": "2 jours",
        "props": [
            {
                "p": "since",
                "v": "2",
                "vt": "num"
            },
            {
                "p": "ask",
                "v": "since",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 420,
        "wires": [
            [
                "365a12cd.1d791e"
            ]
        ]
    },
    {
        "id": "8e88c7ea.c9f718",
        "type": "comment",
        "z": "c07c0ac5.ca6f98",
        "name": "------------------------------------------------------------- Export Data To MQTT -------------------------------------------------------------",
        "info": "",
        "x": 580,
        "y": 840,
        "wires": []
    },
    {
        "id": "b24fd94.5f3fd28",
        "type": "comment",
        "z": "c07c0ac5.ca6f98",
        "name": "------------------------------------------------------------- Get Daily consumption -------------------------------------------------------------",
        "info": "",
        "x": 640,
        "y": 50,
        "wires": []
    },
    {
        "id": "161929bd.583bb6",
        "type": "function",
        "z": "c07c0ac5.ca6f98",
        "name": "Set Header",
        "func": "msg.headers = {};\nmsg.headers['Content-Type'] = 'application/x-www-form-urlencoded';\nmsg.headers['Authorization'] = msg.token;\nmsg.payload = {\n    'type': \"addresses\",\n    'usage_point_id': msg.usage_point_id,\n    'start': msg.start,\n    'end': msg.end\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1080,
        "y": 130,
        "wires": [
            [
                "bfdc116.cb077f"
            ]
        ]
    },
    {
        "id": "bfdc116.cb077f",
        "type": "delay",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "3",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1260,
        "y": 130,
        "wires": [
            [
                "963ef765.aafe78"
            ]
        ]
    },
    {
        "id": "2f63ba8a.1dd6e6",
        "type": "debug",
        "z": "c07c0ac5.ca6f98",
        "name": "PDL Address",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2240,
        "y": 130,
        "wires": []
    },
    {
        "id": "963ef765.aafe78",
        "type": "http request",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "2923591e.104216",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1430,
        "y": 130,
        "wires": [
            [
                "6038d32e.be699c"
            ]
        ]
    },
    {
        "id": "56f23154.b3524",
        "type": "debug",
        "z": "c07c0ac5.ca6f98",
        "name": "Get Contract Data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2290,
        "y": 350,
        "wires": []
    },
    {
        "id": "540d528a.74db7c",
        "type": "function",
        "z": "c07c0ac5.ca6f98",
        "name": "Format Address",
        "func": "msg.payload = msg.payload.customer.usage_points[0].usage_point.usage_point_addresses.street+\", \"+msg.payload.customer.usage_points[0].usage_point.usage_point_addresses.postal_code+\" \"+msg.payload.customer.usage_points[0].usage_point.usage_point_addresses.city\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2050,
        "y": 130,
        "wires": [
            [
                "2f63ba8a.1dd6e6"
            ]
        ]
    },
    {
        "id": "4da01bb.1821ae4",
        "type": "function",
        "z": "c07c0ac5.ca6f98",
        "name": "Format Contracts",
        "func": "var subscribed_power = msg.payload.customer.usage_points[0].contracts.subscribed_power;\nvar distribution_tariff = msg.payload.customer.usage_points[0].contracts.distribution_tariff;\nvar offpeak_hours = msg.payload.customer.usage_points[0].contracts.offpeak_hours|| \"Aucune\";\nvar last_distribution_tariff_change_date = msg.payload.customer.usage_points[0].contracts.last_distribution_tariff_change_date;\n\nmsg.payload = `Puissance souscrite : `+subscribed_power+`\nTarif de distribution : `+distribution_tariff+`\nHeures Creuses : `+offpeak_hours+`\nDernier changement de tarif : `+last_distribution_tariff_change_date+`\n`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2090,
        "y": 350,
        "wires": [
            [
                "56f23154.b3524"
            ]
        ]
    },
    {
        "id": "3e5b5c2.2704da4",
        "type": "switch",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "property": "ask",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "since",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "export2mqtt",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 750,
        "y": 280,
        "wires": [
            [
                "5387acff.629654"
            ],
            [
                "7685451e.f7315c"
            ],
            [
                "b6dfe50.e908818"
            ]
        ]
    },
    {
        "id": "7685451e.f7315c",
        "type": "link out",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "links": [
            "c388a2a7.991dd",
            "14dec3a5.d1b7ec"
        ],
        "x": 855,
        "y": 220,
        "wires": []
    },
    {
        "id": "c388a2a7.991dd",
        "type": "link in",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "links": [
            "7685451e.f7315c",
            "44a1f283.9eceec"
        ],
        "x": 125,
        "y": 1020,
        "wires": [
            [
                "6bd1fe2d.d40bd",
                "8184a1c9.e2814",
                "7be5063b.1c3978",
                "8c963188.078be",
                "3f181835.f64728",
                "c8a10f1f.1a398"
            ]
        ]
    },
    {
        "id": "f1335693.d225f8",
        "type": "link out",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "links": [
            "72485393.b9dd0c"
        ],
        "x": 2215,
        "y": 300,
        "wires": []
    },
    {
        "id": "72485393.b9dd0c",
        "type": "link in",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "links": [
            "f1335693.d225f8"
        ],
        "x": 515,
        "y": 570,
        "wires": [
            [
                "9550b196.e3cbf"
            ]
        ]
    },
    {
        "id": "fc2cbb6f.606238",
        "type": "inject",
        "z": "c07c0ac5.ca6f98",
        "name": "delete",
        "props": [
            {
                "p": "ask",
                "v": "delete",
                "vt": "str"
            },
            {
                "p": "since",
                "v": "1",
                "vt": "str"
            },
            {
                "p": "method",
                "v": "POST",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 540,
        "wires": [
            [
                "365a12cd.1d791e"
            ]
        ]
    },
    {
        "id": "b6dfe50.e908818",
        "type": "function",
        "z": "c07c0ac5.ca6f98",
        "name": "Set Header",
        "func": "msg.headers = {};\nmsg.headers['Content-Type'] = 'application/x-www-form-urlencoded';\nmsg.headers['Authorization'] = msg.token;\nmsg.payload = {\n    'type': \"delete\",\n    'usage_point_id': msg.usage_point_id,\n    'start': msg.start,\n    'end': msg.end\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 910,
        "y": 350,
        "wires": [
            [
                "6e99a993.211488"
            ]
        ]
    },
    {
        "id": "6e99a993.211488",
        "type": "http request",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "2923591e.104216",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1090,
        "y": 350,
        "wires": [
            [
                "1b6bf948.0ff307"
            ]
        ]
    },
    {
        "id": "1b6bf948.0ff307",
        "type": "debug",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 350,
        "wires": []
    },
    {
        "id": "6ca67898.376e18",
        "type": "mqtt out",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "topic": "linky/contrat/puissance",
        "qos": "0",
        "retain": "true",
        "broker": "5a120b36.df9674",
        "x": 480,
        "y": 1200,
        "wires": []
    },
    {
        "id": "b79890ad.dbce1",
        "type": "function",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "func": "msg.payload = msg.subscribed_power;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 290,
        "y": 1200,
        "wires": [
            [
                "6ca67898.376e18"
            ]
        ]
    },
    {
        "id": "8aeacca4.1da78",
        "type": "mqtt out",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "topic": "linky/contrat/heures_creuse",
        "qos": "0",
        "retain": "true",
        "broker": "5a120b36.df9674",
        "x": 490,
        "y": 1260,
        "wires": []
    },
    {
        "id": "36e68417.f2a67c",
        "type": "function",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "func": "var offpeak_hours = msg.offpeak_hours;\nvar parts = offpeak_hours.match(/([('])(.*)([)'])/);\nmsg.payload = parts[2].replace(';',' / ');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 290,
        "y": 1260,
        "wires": [
            [
                "8aeacca4.1da78"
            ]
        ]
    },
    {
        "id": "90422659.0c1f98",
        "type": "mqtt out",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "topic": "linky/contrat/tarif_change",
        "qos": "0",
        "retain": "true",
        "broker": "5a120b36.df9674",
        "x": 490,
        "y": 1320,
        "wires": []
    },
    {
        "id": "56efcde1.3f89e4",
        "type": "function",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "func": "msg.payload = msg.last_distribution_tariff_change_date;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 290,
        "y": 1320,
        "wires": [
            [
                "90422659.0c1f98"
            ]
        ]
    },
    {
        "id": "2de516e0.7a8dea",
        "type": "link out",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "links": [
            "74b7e29b.a39efc"
        ],
        "x": 2255,
        "y": 300,
        "wires": []
    },
    {
        "id": "74b7e29b.a39efc",
        "type": "link in",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "links": [
            "44a1f283.9eceec",
            "2de516e0.7a8dea"
        ],
        "x": 125,
        "y": 1260,
        "wires": [
            [
                "b79890ad.dbce1",
                "36e68417.f2a67c",
                "56efcde1.3f89e4"
            ]
        ]
    },
    {
        "id": "6038d32e.be699c",
        "type": "json",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1580,
        "y": 130,
        "wires": [
            [
                "d684e634.7f48f8"
            ]
        ]
    },
    {
        "id": "4c88a7c.3b20458",
        "type": "switch",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "property": "payload.error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ban",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pdl_empty",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1710,
        "y": 280,
        "wires": [
            [
                "32edfdcc.988912"
            ],
            [
                "60698a0d.a314b4"
            ],
            [
                "d3f22afa.476c48"
            ]
        ]
    },
    {
        "id": "32edfdcc.988912",
        "type": "debug",
        "z": "c07c0ac5.ca6f98",
        "name": "BAN",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1870,
        "y": 180,
        "wires": []
    },
    {
        "id": "d684e634.7f48f8",
        "type": "switch",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "property": "payload.error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ban",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pdl_empty",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1700,
        "y": 130,
        "wires": [
            [
                "32edfdcc.988912"
            ],
            [
                "60698a0d.a314b4"
            ],
            [
                "da6c8240.43a4a"
            ]
        ]
    },
    {
        "id": "3c3f483b.52ab98",
        "type": "debug",
        "z": "c07c0ac5.ca6f98",
        "name": "ERROR",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2060,
        "y": 250,
        "wires": []
    },
    {
        "id": "a12705d0.3c1588",
        "type": "function",
        "z": "c07c0ac5.ca6f98",
        "name": "Set URL + Global conf",
        "func": "if (msg.usage_point_id == \"undefined\" || msg.usage_point_id == \"\") {\n    msg.usage_point_id = global.get('usage_point_id');\n}\n\nif (msg.token == \"undefined\"||msg.token == \"\") {\n    msg.token = global.get('token');\n}\n\nmsg.url = \"https://enedisgateway.tech/api\";\n\nflow.set('max_retry',3);\nflow.set('wait_retry',5000);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 580,
        "y": 280,
        "wires": [
            [
                "3e5b5c2.2704da4"
            ]
        ]
    },
    {
        "id": "60698a0d.a314b4",
        "type": "debug",
        "z": "c07c0ac5.ca6f98",
        "name": "No PDL",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1880,
        "y": 220,
        "wires": []
    },
    {
        "id": "da6c8240.43a4a",
        "type": "switch",
        "z": "c07c0ac5.ca6f98",
        "name": "PDL ?",
        "property": "msg.payload.customer.usage_points",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1860,
        "y": 130,
        "wires": [
            [
                "540d528a.74db7c"
            ],
            []
        ]
    },
    {
        "id": "a88e1086.efbe2",
        "type": "inject",
        "z": "c07c0ac5.ca6f98",
        "name": "2 Semaines",
        "props": [
            {
                "p": "since",
                "v": "16",
                "vt": "num"
            },
            {
                "p": "ask",
                "v": "since",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 04 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 320,
        "wires": [
            [
                "365a12cd.1d791e"
            ]
        ]
    },
    {
        "id": "789bf757.066a78",
        "type": "function",
        "z": "c07c0ac5.ca6f98",
        "name": "Get Retry Count",
        "func": "var retry_count = flow.get(\"retry.\"+msg.id) || 1;\nvar max_retry = flow.get(\"max_retry\");\nvar wait_retry = flow.get('wait_retry');\n\nif (retry_count <= max_retry) {\n    // Retry\n    flow.set(\"retry.\"+msg.id,retry_count+1);\n    msg.delay = wait_retry;\n    return msg;     \n}else{\n    flow.set(\"retry.\"+msg.id,1);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2200,
        "y": 660,
        "wires": [
            [
                "30391d09.14e5d2",
                "2be60e6e.d3d952"
            ]
        ]
    },
    {
        "id": "a4bd5009.501de",
        "type": "debug",
        "z": "c07c0ac5.ca6f98",
        "name": "Next !",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2630,
        "y": 380,
        "wires": []
    },
    {
        "id": "6ec6ae57.00667",
        "type": "link out",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "links": [
            "b644a6d8.07ea18"
        ],
        "x": 2625,
        "y": 610,
        "wires": []
    },
    {
        "id": "30391d09.14e5d2",
        "type": "change",
        "z": "c07c0ac5.ca6f98",
        "name": "Reset Payload to Query",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "query",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2460,
        "y": 660,
        "wires": [
            [
                "6ec6ae57.00667",
                "dc374e18.2016e"
            ]
        ]
    },
    {
        "id": "b644a6d8.07ea18",
        "type": "link in",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "links": [
            "6ec6ae57.00667",
            "b29fd9bc.778118",
            "c85b5d7e.50a7e"
        ],
        "x": 1255,
        "y": 520,
        "wires": [
            [
                "22f0c4e8.2506fc"
            ]
        ]
    },
    {
        "id": "3f9b2aea.1920b6",
        "type": "switch",
        "z": "c07c0ac5.ca6f98",
        "name": "Check Deadline msg",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "{\"error\":\"result_400\",\"enedis_return\":{\"error\":\"ADAM-ERR0125\",\"error_description\":\"The start date must be greater than the history deadline.\",\"error_uri\":\"https://bluecoder.enedis.fr/api-doc/consulter-souscrire\"}}",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "{\"error\":\"result_400\",\"enedis_return\":{\"error\":\"ADAM-ERR0125\",\"error_description\":\"The start date must be greater than the history deadline.\",\"error_uri\":\"https://bluecoder.enedis.fr/api-doc/consulter-souscrire\"}}",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1930,
        "y": 620,
        "wires": [
            [
                "2be60e6e.d3d952"
            ],
            [
                "789bf757.066a78"
            ]
        ]
    },
    {
        "id": "1f328fcd.9c89b",
        "type": "delay",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "90",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2230,
        "y": 460,
        "wires": [
            [
                "71800de5.1d0c24",
                "952d34f4.aca7a8"
            ]
        ]
    },
    {
        "id": "2be60e6e.d3d952",
        "type": "change",
        "z": "c07c0ac5.ca6f98",
        "name": "Queue Next",
        "rules": [
            {
                "t": "set",
                "p": "trigger",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2200,
        "y": 610,
        "wires": [
            [
                "6ec6ae57.00667"
            ]
        ]
    },
    {
        "id": "71800de5.1d0c24",
        "type": "change",
        "z": "c07c0ac5.ca6f98",
        "name": "Queue Next",
        "rules": [
            {
                "t": "set",
                "p": "trigger",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2430,
        "y": 460,
        "wires": [
            [
                "856155e9.74e388"
            ]
        ]
    },
    {
        "id": "952d34f4.aca7a8",
        "type": "switch",
        "z": "c07c0ac5.ca6f98",
        "name": "Queue Ended ?",
        "property": "_queueCount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lte",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2440,
        "y": 420,
        "wires": [
            [
                "a4bd5009.501de",
                "1ae2e209.51315e"
            ]
        ]
    },
    {
        "id": "dc374e18.2016e",
        "type": "debug",
        "z": "c07c0ac5.ca6f98",
        "name": "Retry",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2670,
        "y": 660,
        "wires": []
    },
    {
        "id": "856155e9.74e388",
        "type": "simple-queue",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "firstMessageBypass": true,
        "bypassInterval": "5000",
        "x": 2320,
        "y": 520,
        "wires": [
            [
                "b2bd86bb.833d18",
                "1f328fcd.9c89b"
            ]
        ]
    },
    {
        "id": "22f0c4e8.2506fc",
        "type": "simple-queue",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "firstMessageBypass": true,
        "bypassInterval": "0",
        "x": 1390,
        "y": 570,
        "wires": [
            [
                "20a8cad0.e117b6"
            ]
        ]
    },
    {
        "id": "1ae2e209.51315e",
        "type": "change",
        "z": "c07c0ac5.ca6f98",
        "name": "Queue Next",
        "rules": [
            {
                "t": "set",
                "p": "trigger",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2650,
        "y": 420,
        "wires": [
            [
                "c85b5d7e.50a7e"
            ]
        ]
    },
    {
        "id": "c85b5d7e.50a7e",
        "type": "link out",
        "z": "c07c0ac5.ca6f98",
        "name": "",
        "links": [
            "b644a6d8.07ea18"
        ],
        "x": 2765,
        "y": 420,
        "wires": []
    },
    {
        "id": "db2588d.0cb8878",
        "type": "inject",
        "z": "c07c0ac5.ca6f98",
        "name": "3 to 2 years (Y-3)",
        "props": [
            {
                "p": "since",
                "v": "1095",
                "vt": "num"
            },
            {
                "p": "to",
                "v": "730",
                "vt": "num"
            },
            {
                "p": "ask",
                "v": "since",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 70,
        "wires": [
            [
                "365a12cd.1d791e"
            ]
        ]
    },
    {
        "id": "43436ec7.c1667",
        "type": "inject",
        "z": "c07c0ac5.ca6f98",
        "name": "1 Mois",
        "props": [
            {
                "p": "since",
                "v": "31",
                "vt": "num"
            },
            {
                "p": "ask",
                "v": "since",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 270,
        "wires": [
            [
                "365a12cd.1d791e"
            ]
        ]
    },
    {
        "id": "a89b9cb9.6ae9",
        "type": "inject",
        "z": "c07c0ac5.ca6f98",
        "name": "CUSTOM",
        "props": [
            {
                "p": "since",
                "v": "800",
                "vt": "num"
            },
            {
                "p": "to",
                "v": "700",
                "vt": "num"
            },
            {
                "p": "ask",
                "v": "since",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 600,
        "wires": [
            [
                "365a12cd.1d791e"
            ]
        ]
    },
    {
        "id": "2923591e.104216",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false
    },
    {
        "id": "57d9cd06.0e4dc4",
        "type": "influxdb",
        "hostname": "IP.VERS.TON.INFLUXDB",
        "port": "8086",
        "protocol": "http",
        "database": "NOM_DE_TA_BDD",
        "name": "HASS",
        "usetls": false,
        "tls": "2923591e.104216",
        "influxdbVersion": "1.x",
        "url": "",
        "rejectUnauthorized": false
    },
    {
        "id": "5a120b36.df9674",
        "type": "mqtt-broker",
        "name": "MQTT",
        "broker": "IP.VERS.TON.MQTT",
        "port": "1883",
        "clientid": "node-red-dynamic",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": false,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "true",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "true",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willRetain": "true",
        "willPayload": ""
    }
]
